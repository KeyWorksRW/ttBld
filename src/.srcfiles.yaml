# Requires ttBld.exe version 1.4.0 or higher to process

Options:
    Project:     ttBld        # Target name ('D' will be appended to Debug builds, e.g. ttBldD.exe)
    Exe_type:    console      # [window | console | lib | dll]
    Pch:         pch.h        # "none" or name of header file to use for precompilation
    Optimize:    space        # [space | speed] optimization
    Warn:        4            # [1-4]
    Crt_rel:     dll          # [static | dll] type of CRT to link to in release builds
    Crt_dbg:     dll          # [static | dll] type of CRT to link to in debug builds
    Ms_linker:   false        # true means use link.exe even when compiling with clang

    CFlags_cmn:  -std:c++17 -DWXUSINGDLL  # flags to pass to the compiler in all builds

    TargetDir: ../bin         # 64-bit target directory

    Natvis:      ttBld.natvis # MSVC Debug visualizer

    IncDirs:     ./;../../ttwx;../../ttLibwx/include  # temporary location, change before Public release
    BuildLibs:   ../../ttwx;../../ttLibwx/src      # temporary location, change before Public release

#    IncDirs:     ../ttLibwx/include                # additional directories for header files
#    BuildLibs:   ../ttLibwx/src                    # libraries that need to be built (added to makefile generation)

Files:
    ttBld.rc            # Windows resource files
    mainapp.cpp         # entry point, global strings, library pragmas

    ninja.cpp           # CNinja for creating .ninja scripts
    cmplrMsvc.cpp       # Creates .ninja scripts for MSVC and CLANG-CL compilers

    addfiles.cpp        # Used to add one or more filenames to a .srcfiles file
    codelite.cpp        # Creates a CodeLite project
    convert.cpp         # Various conversion methods
    convertdlg.cpp      # CConvertDlg for converting a project into a .srcfiles
    createmakefile.cpp  # CreateMakeFile method for creating a makefile
    csrcfiles.cpp       # CSrcFiles class for reading .srcfiles
    dryrun.cpp          # CDryRun class for testing
    finder.cpp          # Routines for finding executables such as the MSVC compiler
    gencmdfiles.cpp     # Generates MSVCenv.cmd and Code.cmd files
    gitfuncs.cpp        # Functions for working with .git
    options.cpp         # contains all Options strings and CSrcOptions class for working with them
    parsehhp.cpp        # CParseHHP class for parsing a .hhp file
    rcdep.cpp           # Contains functions for parsing RC dependencies
    vcxproj.cpp         # Creates a Visual Studio project file
    verninja.cpp        # CVerMakeNinja class
    vs.cpp              # Creates .vs/tasks.vs.json and .vs/launch.vs.json
    vscode.cpp          # Creates/updates .vscode files
    writesrcfiles.cpp   # CWriteSrcFiles class for writing .srcfiles
    yamalize.cpp        # Used to convert .srcfiles to .vscode/srcfiles.yaml

    # DO NOT RUN clang-format on the following file! We need to be able to sync changes from the original repository
    pugixml/pugixml.cpp # Built directly rather than building a library

# Modules for creating the Options UI

    dlgoptions.cpp      # CTabOptions dialog

    tabgeneral.cpp
    tabcompiler.cpp
    tabclang.cpp
    tablibs.cpp
    tablinker.cpp
    tabrcmidl.cpp

    addfuncname.cpp     # CAddFuncName dialog
    dlggettext.cpp      # CDlgGetText dialog
    dlgvscode.cpp       # CDlgVsCode dialog
