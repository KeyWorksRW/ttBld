# Requires ttBld.exe version 1.8.1 or higher to process

# This file is only used as a quick lookup for files, and to use ttBld.exe to generate ninja files that allow
# clang-cl.exe to be used for additional code checking on Windows (clang-cl can spot different problems that
# the msvc compiler doesn't warn about.)

Options:
    Project:     ttBld        # Target name ('D' will be appended to Debug builds, e.g. ttBldD.exe)
    Exe_type:    lib          # [window | console | lib | dll]
    Pch:         pch.h        # "none" or name of header file to use for precompilation
    Optimize:    space        # [space | speed] optimization
    Warn:        4            # [1-4]
    Crt_rel:     dll          # [static | dll] type of CRT to link to in release builds
    Crt_dbg:     dll          # [static | dll] type of CRT to link to in debug builds
    Ms_linker:   true         # true means use link.exe even when compiling with clang

    CFlags_cmn: -std:c++17 /Zc:__cplusplus /utf-8

    IncDirs:     ./;precompile;ui;convert;../ttlib/include;../wxSnapshot/include;../wxSnapshot/win
    TargetDir:   ../build/CMakeFiles/CMakeTmp   # just a temporary location for the library
    Natvis:      ttBld.natvis # MSVC Debug visualizer


Files:
    ttBld.rc            # Windows resource files

    mainapp.cpp         # entry point, global strings, library pragmas

    addfiles.cpp        # Used to add one or more filenames to a .srcfiles file
    cmplrMsvc.cpp       # Creates .ninja scripts for MSVC and CLANG-CL compilers
    createmakefile.cpp  # CreateMakeFile method for creating a makefile
    csrcfiles.cpp       # CSrcFiles class for reading .srcfiles
    dryrun.cpp          # CDryRun class for testing
    finder.cpp          # Routines for finding executables such as the MSVC compiler
    gencmdfiles.cpp     # Generates MSVCenv.cmd and Code.cmd files
    gitfuncs.cpp        # Functions for working with .git
    image_hdr.cpp       # Convert image into png header
    make_hgz.cpp        # Converts a file into a .gz and stores as char array header
    ninja.cpp           # CNinja for creating .ninja scripts
    options.cpp         # contains all Options strings and CSrcOptions class for working with them
    rcdep.cpp           # Contains functions for parsing RC dependencies
    verninja.cpp        # CVerMakeNinja class
    vs.cpp              # Creates .vs/tasks.vs.json and .vs/launch.vs.json
    vscode.cpp          # Creates/updates .vscode files
    writesrc.cpp        # Writes a new or update srcfiles.yaml file
    yamalize.cpp        # Used to convert .srcfiles to .vscode/srcfiles.yaml

    convert/convert.cpp          # Various conversion methods
    convert/readcodelite.cpp     # Class for converting a CodeLite .project file to .srcfiles.yaml
    convert/readdsp.cpp          # Class for converting a Visual Studio .DSP file to .srcfiles.yaml
    convert/readvc.cpp           # Class for converting a Visual Studio .vcproj file to .srcfiles.yaml
    convert/readvcx.cpp          # Converts a Visual Studio project file into .srcfiles.yaml
    convert/writevcx.cpp         # Create a Visual Studio project file
    convert/write_cmake.cpp      # Create a CMakeLists.txt file
    convert/wxWidgets_file.cpp   # Convert wxWidgets build/file to CMake file list

    # DO NOT RUN clang-format on the following file! We need to be able to sync changes from the original repository
    pugixml/pugixml.cpp          # Built directly rather than building a library

    # wxUiEditor generated classes and their derived version for displaying wxWidgets UI

    ui/convertdlg.cpp            # Dialog specifying what to convert into a .srcfiles.yaml file
    ui/optionsdlg.cpp            # Dialog for setting all .srcfile options
    ui/vscodedlg.cpp             # Dialog for setting options to create tasks.json and launch.json

    ui/convertvs_base.cpp        # Dialog to get file and path for VS to CMake conversion
    ui/convertdlgBase.cpp        # wxUiEditor generated file
    ui/optionsdlgBase.cpp        # wxUiEditor generated file
    ui/vscodedlgBase.cpp         # wxUiEditor generated file

    # ttLib files

    ../ttlib/src/ttconsole.cpp   # Sets/restores console foreground color
    ../ttlib/src/ttcstr.cpp      # Class for handling zero-terminated char strings.
    ../ttlib/src/ttcview.cpp     # string_view functionality on a zero-terminated char string.
    ../ttlib/src/ttlibspace.cpp  # ttlib namespace functions
    ../ttlib/src/ttmultistr.cpp  # Breaks a single string into multiple strings
    ../ttlib/src/ttparser.cpp    # Command line parser
    ../ttlib/src/ttstr.cpp       # ttString -- enhanced version of wxString
    ../ttlib/src/ttsview.cpp     # std::string_view with additional methods
    ../ttlib/src/tttextfile.cpp  # Classes for reading and writing text files.

    ../ttlib/src/winsrc/ttregistry.cpp  # Class for working with the Windows registry

DebugFiles:
    ../ttlib/src/winsrc/ttdebug_min.cpp  # we use our own version of this to minimize Windows code requirements
