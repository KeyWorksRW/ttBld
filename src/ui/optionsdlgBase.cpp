////////////////////////////////////////////////////////////////////////////////
// Code generated by wxUiEditor -- see https://github.com/KeyWorksRW/wxUiEditor/
//
// DO NOT EDIT THIS FILE! Your changes will be lost if it is re-generated!
////////////////////////////////////////////////////////////////////////////////

#include <wx/button.h>
#include <wx/checkbox.h>
#include <wx/colour.h>
#include <wx/panel.h>
#include <wx/persist.h>
#include <wx/persist/toplevel.h>
#include <wx/radiobut.h>
#include <wx/settings.h>
#include <wx/sizer.h>
#include <wx/spinctrl.h>
#include <wx/statbox.h>
#include <wx/valgen.h>
#include <wx/valtext.h>

#include "optionsdlgBase.h"

bool OptionsDlgBase::Create(wxWindow *parent, wxWindowID id, const wxString &title,
        const wxPoint&pos, const wxSize& size, long style, const wxString &name)
{
    if (!wxDialog::Create(parent, id, title, pos, size, style, name))
        return false;

    auto parent_sizer = new wxBoxSizer(wxVERTICAL);

    m_notebook = new wxNotebook(this, wxID_ANY);
    m_notebook->SetMinSize(wxSize(370, -1));
    parent_sizer->Add(m_notebook, wxSizerFlags(1).Expand().Border(wxALL));

    auto page = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(page, "General", true);
    page->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));

    auto parent_sizer2 = new wxBoxSizer(wxVERTICAL);

    auto box_sizer = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer2->Add(box_sizer, wxSizerFlags().Expand().Border(wxALL));

    m_staticText = new wxStaticText(page, wxID_ANY, "&Project Name:");
    box_sizer->Add(m_staticText, wxSizerFlags().Center().Border(wxALL));

    auto textCtrl = new wxTextCtrl(page, wxID_ANY, wxEmptyString);
    textCtrl->SetValidator(wxTextValidator(wxFILTER_NONE, &m_ProjectName));
    box_sizer->Add(textCtrl, wxSizerFlags(1).Border(wxALL));

    auto static_box = new wxStaticBoxSizer(wxVERTICAL, page, "Project Type");
    parent_sizer2->Add(static_box, wxSizerFlags().Expand().Border(wxALL));

    auto flex_grid_sizer6 = new wxFlexGridSizer(3, 0, 0);
    static_box->Add(flex_grid_sizer6, wxSizerFlags().Expand().Border(wxALL));

    auto radioBtn = new wxRadioButton(static_box->GetStaticBox(), wxID_ANY, "Window");
    radioBtn->SetValidator(wxGenericValidator(&m_isWindow));
    flex_grid_sizer6->Add(radioBtn, wxSizerFlags().Border(wxALL));

    auto radioBtn2 = new wxRadioButton(static_box->GetStaticBox(), wxID_ANY, "Console");
    radioBtn2->SetValidator(wxGenericValidator(&m_isConsole));
    flex_grid_sizer6->Add(radioBtn2, wxSizerFlags().Border(wxALL));

    auto radioBtn3 = new wxRadioButton(static_box->GetStaticBox(), wxID_ANY, "Library");
    radioBtn3->SetValidator(wxGenericValidator(&m_isLibrary));
    flex_grid_sizer6->Add(radioBtn3, wxSizerFlags().Border(wxALL));

    auto radioBtn4 = new wxRadioButton(static_box->GetStaticBox(), wxID_ANY, "DLL");
    radioBtn4->SetValidator(wxGenericValidator(&m_isDll));
    flex_grid_sizer6->Add(radioBtn4, wxSizerFlags().Border(wxALL));

    auto radioBtn_5 = new wxRadioButton(static_box->GetStaticBox(), wxID_ANY, "OCX");
    radioBtn_5->SetValidator(wxGenericValidator(&m_isOcx));
    flex_grid_sizer6->Add(radioBtn_5, wxSizerFlags().Border(wxALL));

    auto box_sizer2 = new wxBoxSizer(wxVERTICAL);
    parent_sizer2->Add(box_sizer2, wxSizerFlags().Expand().Border(wxALL));

    auto staticText = new wxStaticText(page, wxID_ANY, "&Target Directory");
    box_sizer2->Add(staticText, wxSizerFlags().Border(wxALL));

    m_TargetDirPicker = new wxDirPickerCtrl(page, wxID_ANY, wxEmptyString,  wxDirSelectorPromptStr);
    box_sizer2->Add(m_TargetDirPicker, wxSizerFlags().Expand().Border(wxALL));

    page->SetSizerAndFit(parent_sizer2);

    auto panel = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(panel, "Compiler");
    panel->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));

    auto parent_sizer3 = new wxBoxSizer(wxVERTICAL);

    auto box_sizer3 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer3->Add(box_sizer3, wxSizerFlags().Expand().Border(wxALL));

    auto staticText2 = new wxStaticText(panel, wxID_ANY, "&Optimize for");
    box_sizer3->Add(staticText2, wxSizerFlags().Border(wxALL));

    auto radioBtn5 = new wxRadioButton(panel, wxID_ANY, "Space", wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
    radioBtn5->SetValidator(wxGenericValidator(&m_isSpaceOptimization));
    box_sizer3->Add(radioBtn5, wxSizerFlags().Border(wxALL));

    auto radioBtn6 = new wxRadioButton(panel, wxID_ANY, "Speed");
    radioBtn6->SetValidator(wxGenericValidator(&m_isSpeedOptimization));
    box_sizer3->Add(radioBtn6, wxSizerFlags().Border(wxALL));

    auto box_sizer4 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer3->Add(box_sizer4, wxSizerFlags().Expand().Border(wxALL));

    auto staticText3 = new wxStaticText(panel, wxID_ANY, "&Warning level:");
    box_sizer4->Add(staticText3, wxSizerFlags().Center().Border(wxALL));

    auto spinCtrl = new wxSpinCtrl(panel, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 1, 4, 4);
    spinCtrl->SetValidator(wxGenericValidator(&m_WarningLevel));
    box_sizer4->Add(spinCtrl, wxSizerFlags().Border(wxALL));

    auto box_sizer5 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer3->Add(box_sizer5, wxSizerFlags().Expand().Border(wxALL));

    auto staticText4 = new wxStaticText(panel, wxID_ANY, "PCH &Header:");
    box_sizer5->Add(staticText4, wxSizerFlags().Center().Border(wxALL));

    m_PchHeaderPicker = new wxFilePickerCtrl(panel, wxID_ANY, wxEmptyString, wxFileSelectorPromptStr, 
        "Header files|*.h;*.hh;*.hpp;*.hxx", wxDefaultPosition, wxDefaultSize,
        wxFLP_FILE_MUST_EXIST|wxFLP_OPEN|wxFLP_USE_TEXTCTRL);
    box_sizer5->Add(m_PchHeaderPicker, wxSizerFlags().Border(wxALL));

    auto box_sizer6 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer3->Add(box_sizer6, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    auto staticText5 = new wxStaticText(panel, wxID_ANY, "PCH &Source:");
    box_sizer6->Add(staticText5, wxSizerFlags().Border(wxALL));

    m_PchSrcPicker = new wxFilePickerCtrl(panel, wxID_ANY, wxEmptyString, wxFileSelectorPromptStr, 
        "Source files|*.cpp;*.cc;*.cxx", wxDefaultPosition, wxDefaultSize,
        wxFLP_FILE_MUST_EXIST|wxFLP_OPEN|wxFLP_USE_TEXTCTRL);
    box_sizer6->Add(m_PchSrcPicker, wxSizerFlags().Border(wxALL));

    auto box_sizer7 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer3->Add(box_sizer7, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    auto staticText6 = new wxStaticText(panel, wxID_ANY, "&Include Directories:");
    box_sizer7->Add(staticText6, wxSizerFlags(1).Center().Border(wxALL));

    auto btnAddInclude = new wxButton(panel, wxID_ANY, "&Add..");
    box_sizer7->Add(btnAddInclude, wxSizerFlags().Border(wxALL));

    auto box_sizer8 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer3->Add(box_sizer8, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    m_textIncludeDirs = new wxTextCtrl(panel, wxID_ANY, wxEmptyString);
    m_textIncludeDirs->SetValidator(wxTextValidator(wxFILTER_NONE, &m_IncludeDirs));
    box_sizer8->Add(m_textIncludeDirs, wxSizerFlags(1).Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    auto static_box2 = new wxStaticBoxSizer(wxVERTICAL, panel, "Compiler Flags");
    parent_sizer3->Add(static_box2, wxSizerFlags().Expand().Border(wxALL));

    auto flex_grid_sizer = new wxFlexGridSizer(2, 0, 0);
    {
        flex_grid_sizer->AddGrowableCol(1);
        flex_grid_sizer->SetFlexibleDirection(wxHORIZONTAL);
    }
    static_box2->Add(flex_grid_sizer, wxSizerFlags().Expand().Border(wxALL));

    auto staticText7 = new wxStaticText(static_box2->GetStaticBox(), wxID_ANY, "&Common:");
    staticText7->SetToolTip("Compiler flags that will be used in all builds.");
    flex_grid_sizer->Add(staticText7, wxSizerFlags().Center().Border(wxALL));

    auto commonFlags = new wxTextCtrl(static_box2->GetStaticBox(), wxID_ANY, wxEmptyString);
    commonFlags->SetValidator(wxTextValidator(wxFILTER_NONE, &m_CommonCppFlags));
    commonFlags->SetToolTip("Compiler flags that will be used in all builds.");
    flex_grid_sizer->Add(commonFlags, wxSizerFlags().Expand().Border(wxALL));

    auto staticText8 = new wxStaticText(static_box2->GetStaticBox(), wxID_ANY, "&Release:");
    flex_grid_sizer->Add(staticText8, wxSizerFlags().Center().Border(wxALL));

    auto releaseFlags = new wxTextCtrl(static_box2->GetStaticBox(), wxID_ANY, wxEmptyString);
    releaseFlags->SetValidator(wxTextValidator(wxFILTER_NONE, &m_ReleaseCppFlags));
    flex_grid_sizer->Add(releaseFlags, wxSizerFlags().Expand().Border(wxALL));

    auto staticText9 = new wxStaticText(static_box2->GetStaticBox(), wxID_ANY, "&Debug:");
    staticText9->SetToolTip("Compiler flags that will only be used in a Debug build.");
    flex_grid_sizer->Add(staticText9, wxSizerFlags().Center().Border(wxALL));

    auto debugFlags = new wxTextCtrl(static_box2->GetStaticBox(), wxID_ANY, wxEmptyString);
    debugFlags->SetValidator(wxTextValidator(wxFILTER_NONE, &m_DebugCppFlags));
    debugFlags->SetToolTip("Compiler flags that will only be used in a Debug build.");
    flex_grid_sizer->Add(debugFlags, wxSizerFlags().Expand().Border(wxALL));

    panel->SetSizerAndFit(parent_sizer3);

    auto panel2 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(panel2, "Libs");
    panel2->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));

    auto parent_sizer4 = new wxBoxSizer(wxVERTICAL);

    auto box_sizer9 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer4->Add(box_sizer9, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    auto staticText10 = new wxStaticText(panel2, wxID_ANY, "&Common Libraries:");
    box_sizer9->Add(staticText10, wxSizerFlags(1).Bottom().Border(wxALL));

    auto btnAddCommonLibrary = new wxButton(panel2, wxID_ANY, "&Add..");
    box_sizer9->Add(btnAddCommonLibrary, wxSizerFlags().Border(wxALL));

    auto box_sizer10 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer4->Add(box_sizer10, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    m_commonLibs = new wxTextCtrl(panel2, wxID_ANY, wxEmptyString);
    m_commonLibs->SetValidator(wxTextValidator(wxFILTER_NONE, &m_CommonLibs));
    box_sizer10->Add(m_commonLibs, wxSizerFlags(1).Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    auto box_sizer11 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer4->Add(box_sizer11, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    auto staticText11 = new wxStaticText(panel2, wxID_ANY, "&Release Libraries:");
    box_sizer11->Add(staticText11, wxSizerFlags(1).Bottom().Border(wxALL));

    auto btnAddReleaseLibraries = new wxButton(panel2, wxID_ANY, "&Add..");
    box_sizer11->Add(btnAddReleaseLibraries, wxSizerFlags().Border(wxALL));

    auto box_sizer14 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer4->Add(box_sizer14, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    m_releaseLibs = new wxTextCtrl(panel2, wxID_ANY, wxEmptyString);
    m_releaseLibs->SetValidator(wxTextValidator(wxFILTER_NONE, &m_ReleaseLibs));
    box_sizer14->Add(m_releaseLibs, wxSizerFlags(1).Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    auto box_sizer12 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer4->Add(box_sizer12, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    auto staticText12 = new wxStaticText(panel2, wxID_ANY, "&Debug Libraries:");
    box_sizer12->Add(staticText12, wxSizerFlags(1).Bottom().Border(wxALL));

    auto btnAddDebugLibraries = new wxButton(panel2, wxID_ANY, "&Add..");
    box_sizer12->Add(btnAddDebugLibraries, wxSizerFlags().Border(wxALL));

    auto box_sizer15 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer4->Add(box_sizer15, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    m_debugLibs = new wxTextCtrl(panel2, wxID_ANY, wxEmptyString);
    m_debugLibs->SetValidator(wxTextValidator(wxFILTER_NONE, &m_DebugLibs));
    box_sizer15->Add(m_debugLibs, wxSizerFlags(1).Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    auto box_sizer13 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer4->Add(box_sizer13, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxTOP, wxSizerFlags::GetDefaultBorder()));

    auto staticText13 = new wxStaticText(panel2, wxID_ANY, "&Build and link to these libraries:");
    box_sizer13->Add(staticText13, wxSizerFlags(1).Bottom().Border(wxALL));

    auto btnAddBuildLibraries = new wxButton(panel2, wxID_ANY, "&Add..");
    box_sizer13->Add(btnAddBuildLibraries, wxSizerFlags().Border(wxALL));

    auto box_sizer16 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer4->Add(box_sizer16, wxSizerFlags().Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    m_buildLibs = new wxTextCtrl(panel2, wxID_ANY, wxEmptyString);
    m_buildLibs->SetValidator(wxTextValidator(wxFILTER_NONE, &m_BuildLibs));
    box_sizer16->Add(m_buildLibs, wxSizerFlags(1).Expand().Border(wxLEFT|wxRIGHT|wxBOTTOM, wxSizerFlags::GetDefaultBorder()));

    panel2->SetSizerAndFit(parent_sizer4);

    auto panel6 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(panel6, "Linker");
    panel6->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));

    auto parent_sizer8 = new wxBoxSizer(wxVERTICAL);

    auto static_box6 = new wxStaticBoxSizer(wxVERTICAL, panel6, "Linker Flags");
    parent_sizer8->Add(static_box6, wxSizerFlags().Expand().Border(wxALL));

    auto flex_grid_sizer5 = new wxFlexGridSizer(2, 0, 0);
    {
        flex_grid_sizer5->AddGrowableCol(1);
        flex_grid_sizer5->SetFlexibleDirection(wxHORIZONTAL);
    }
    static_box6->Add(flex_grid_sizer5, wxSizerFlags().Expand().Border(wxALL));

    auto staticText23 = new wxStaticText(static_box6->GetStaticBox(), wxID_ANY, "&Common:");
    staticText23->SetToolTip("Compiler flags that will be used in all builds.");
    flex_grid_sizer5->Add(staticText23, wxSizerFlags().Center().Border(wxALL));

    auto commonFlags4 = new wxTextCtrl(static_box6->GetStaticBox(), wxID_ANY, wxEmptyString);
    commonFlags4->SetValidator(wxTextValidator(wxFILTER_NONE, &m_CommonLinkFlags));
    commonFlags4->SetToolTip("Compiler flags that will be used in all builds.");
    flex_grid_sizer5->Add(commonFlags4, wxSizerFlags().Expand().Border(wxALL));

    auto staticText24 = new wxStaticText(static_box6->GetStaticBox(), wxID_ANY, "&Release:");
    flex_grid_sizer5->Add(staticText24, wxSizerFlags().Center().Border(wxALL));

    auto releaseFlags4 = new wxTextCtrl(static_box6->GetStaticBox(), wxID_ANY, wxEmptyString);
    releaseFlags4->SetValidator(wxTextValidator(wxFILTER_NONE, &m_ReleaseLinkFlags));
    flex_grid_sizer5->Add(releaseFlags4, wxSizerFlags().Expand().Border(wxALL));

    auto staticText25 = new wxStaticText(static_box6->GetStaticBox(), wxID_ANY, "&Debug:");
    staticText25->SetToolTip("Compiler flags that will only be used in a Debug build.");
    flex_grid_sizer5->Add(staticText25, wxSizerFlags().Center().Border(wxALL));

    auto debugFlags4 = new wxTextCtrl(static_box6->GetStaticBox(), wxID_ANY, wxEmptyString);
    debugFlags4->SetValidator(wxTextValidator(wxFILTER_NONE, &m_DebugLinkFlags));
    debugFlags4->SetToolTip("Compiler flags that will only be used in a Debug build.");
    flex_grid_sizer5->Add(debugFlags4, wxSizerFlags().Expand().Border(wxALL));

    auto box_sizer18 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer8->Add(box_sizer18, wxSizerFlags().Expand().Border(wxALL));

    auto staticText26 = new wxStaticText(panel6, wxID_ANY, "Dynamic CRT:");
    box_sizer18->Add(staticText26, wxSizerFlags().Center().Border(wxALL));

    auto checkBox2 = new wxCheckBox(panel6, wxID_ANY, "Release");
    checkBox2->SetValue(true);
    checkBox2->SetValidator(wxGenericValidator(&m_isReleaseDllCRT));
    box_sizer18->Add(checkBox2, wxSizerFlags().Border(wxALL));

    auto checkBox3 = new wxCheckBox(panel6, wxID_ANY, "Debug");
    checkBox3->SetValue(true);
    checkBox3->SetValidator(wxGenericValidator(&m_isDebugDllCRT));
    box_sizer18->Add(checkBox3, wxSizerFlags().Border(wxALL));

    auto box_sizer19 = new wxBoxSizer(wxHORIZONTAL);
    parent_sizer8->Add(box_sizer19, wxSizerFlags().Expand().Border(wxALL));

    auto staticText27 = new wxStaticText(panel6, wxID_ANY, "NATVIS File:");
    box_sizer19->Add(staticText27, wxSizerFlags().Center().Border(wxALL));

    m_NatvisPicker = new wxFilePickerCtrl(panel6, wxID_ANY, wxEmptyString, wxFileSelectorPromptStr, 
        "Natvis Files|*.natvis", wxDefaultPosition, wxDefaultSize,
        wxFLP_USE_TEXTCTRL|wxFLP_OPEN|wxFLP_FILE_MUST_EXIST);
    box_sizer19->Add(m_NatvisPicker, wxSizerFlags(1).Border(wxALL));

    panel6->SetSizerAndFit(parent_sizer8);

    auto panel3 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(panel3, "RC");
    panel3->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));

    auto parent_sizer5 = new wxBoxSizer(wxVERTICAL);

    auto static_box3 = new wxStaticBoxSizer(wxVERTICAL, panel3, "Resource compiler flags");
    parent_sizer5->Add(static_box3, wxSizerFlags().Expand().Border(wxALL));

    auto flex_grid_sizer2 = new wxFlexGridSizer(2, 0, 0);
    {
        flex_grid_sizer2->AddGrowableCol(1);
    }
    static_box3->Add(flex_grid_sizer2, wxSizerFlags().Expand().Border(wxALL));

    auto staticText14 = new wxStaticText(static_box3->GetStaticBox(), wxID_ANY, "Common:");
    flex_grid_sizer2->Add(staticText14, wxSizerFlags().Center().Border(wxALL));

    auto commonRCFlags = new wxTextCtrl(static_box3->GetStaticBox(), wxID_ANY, wxEmptyString);
    commonRCFlags->SetValidator(wxTextValidator(wxFILTER_NONE, &m_commonRcFlags));
    flex_grid_sizer2->Add(commonRCFlags, wxSizerFlags().Expand().Border(wxALL));

    auto staticText15 = new wxStaticText(static_box3->GetStaticBox(), wxID_ANY, "Release:");
    flex_grid_sizer2->Add(staticText15, wxSizerFlags().Center().Border(wxALL));

    auto releaseRCFlags = new wxTextCtrl(static_box3->GetStaticBox(), wxID_ANY, wxEmptyString);
    releaseRCFlags->SetValidator(wxTextValidator(wxFILTER_NONE, &m_releaseRcFlags));
    flex_grid_sizer2->Add(releaseRCFlags, wxSizerFlags().Expand().Border(wxALL));

    auto staticText16 = new wxStaticText(static_box3->GetStaticBox(), wxID_ANY, "Debug:");
    flex_grid_sizer2->Add(staticText16, wxSizerFlags().Center().Border(wxALL));

    auto debugRCFlags = new wxTextCtrl(static_box3->GetStaticBox(), wxID_ANY, wxEmptyString);
    debugRCFlags->SetValidator(wxTextValidator(wxFILTER_NONE, &m_debugRcFlags));
    flex_grid_sizer2->Add(debugRCFlags, wxSizerFlags().Expand().Border(wxALL));

    panel3->SetSizerAndFit(parent_sizer5);

    auto panel5 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(panel5, "CLang");
    panel5->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));

    auto parent_sizer7 = new wxBoxSizer(wxVERTICAL);

    auto static_box5 = new wxStaticBoxSizer(wxVERTICAL, panel5, "Additional flags for clang-cl (Windows)");
    parent_sizer7->Add(static_box5, wxSizerFlags().Expand().Border(wxALL));

    auto flex_grid_sizer4 = new wxFlexGridSizer(2, 0, 0);
    {
        flex_grid_sizer4->AddGrowableCol(1);
    }
    static_box5->Add(flex_grid_sizer4, wxSizerFlags().Expand().Border(wxALL));

    auto staticText20 = new wxStaticText(static_box5->GetStaticBox(), wxID_ANY, "Common:");
    flex_grid_sizer4->Add(staticText20, wxSizerFlags().Center().Border(wxALL));

    auto commonFlags3 = new wxTextCtrl(static_box5->GetStaticBox(), wxID_ANY, wxEmptyString);
    commonFlags3->SetValidator(wxTextValidator(wxFILTER_NONE, &m_commonClangFlags));
    flex_grid_sizer4->Add(commonFlags3, wxSizerFlags().Expand().Border(wxALL));

    auto staticText21 = new wxStaticText(static_box5->GetStaticBox(), wxID_ANY, "Release:");
    flex_grid_sizer4->Add(staticText21, wxSizerFlags().Center().Border(wxALL));

    auto releaseFlags3 = new wxTextCtrl(static_box5->GetStaticBox(), wxID_ANY, wxEmptyString);
    releaseFlags3->SetValidator(wxTextValidator(wxFILTER_NONE, &m_releaseClangFlags));
    flex_grid_sizer4->Add(releaseFlags3, wxSizerFlags().Expand().Border(wxALL));

    auto staticText22 = new wxStaticText(static_box5->GetStaticBox(), wxID_ANY, "Debug:");
    flex_grid_sizer4->Add(staticText22, wxSizerFlags().Center().Border(wxALL));

    auto debugFlags3 = new wxTextCtrl(static_box5->GetStaticBox(), wxID_ANY, wxEmptyString);
    debugFlags3->SetValidator(wxTextValidator(wxFILTER_NONE, &m_debugClangFlags));
    flex_grid_sizer4->Add(debugFlags3, wxSizerFlags().Expand().Border(wxALL));

    auto box_sizer17 = new wxBoxSizer(wxHORIZONTAL);
    static_box5->Add(box_sizer17, wxSizerFlags().Expand().Border(wxALL));

    auto checkBox = new wxCheckBox(static_box5->GetStaticBox(), wxID_ANY, "Always use &MS Linker (link.exe)");
    checkBox->SetValidator(wxGenericValidator(&m_useMSLinker));
    box_sizer17->Add(checkBox, wxSizerFlags().Border(wxALL));

    panel5->SetSizerAndFit(parent_sizer7);

    auto panel4 = new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_notebook->AddPage(panel4, "MIDL");
    panel4->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));

    auto parent_sizer6 = new wxBoxSizer(wxVERTICAL);

    auto static_box4 = new wxStaticBoxSizer(wxVERTICAL, panel4, "MIDL compiler flags");
    parent_sizer6->Add(static_box4, wxSizerFlags().Expand().Border(wxALL));

    auto flex_grid_sizer3 = new wxFlexGridSizer(2, 0, 0);
    {
        flex_grid_sizer3->AddGrowableCol(1);
    }
    static_box4->Add(flex_grid_sizer3, wxSizerFlags().Expand().Border(wxALL));

    auto staticText17 = new wxStaticText(static_box4->GetStaticBox(), wxID_ANY, "Common:");
    flex_grid_sizer3->Add(staticText17, wxSizerFlags().Center().Border(wxALL));

    auto commonFlags2 = new wxTextCtrl(static_box4->GetStaticBox(), wxID_ANY, wxEmptyString);
    commonFlags2->SetValidator(wxTextValidator(wxFILTER_NONE, &m_commonMidlFlags));
    flex_grid_sizer3->Add(commonFlags2, wxSizerFlags().Expand().Border(wxALL));

    auto staticText18 = new wxStaticText(static_box4->GetStaticBox(), wxID_ANY, "Release:");
    flex_grid_sizer3->Add(staticText18, wxSizerFlags().Center().Border(wxALL));

    auto releaseFlags2 = new wxTextCtrl(static_box4->GetStaticBox(), wxID_ANY, wxEmptyString);
    releaseFlags2->SetValidator(wxTextValidator(wxFILTER_NONE, &m_releaseMidlFlags));
    flex_grid_sizer3->Add(releaseFlags2, wxSizerFlags().Expand().Border(wxALL));

    auto staticText19 = new wxStaticText(static_box4->GetStaticBox(), wxID_ANY, "Debug:");
    flex_grid_sizer3->Add(staticText19, wxSizerFlags().Center().Border(wxALL));

    auto debugFlags2 = new wxTextCtrl(static_box4->GetStaticBox(), wxID_ANY, wxEmptyString);
    debugFlags2->SetValidator(wxTextValidator(wxFILTER_NONE, &m_debugMidlFlags));
    flex_grid_sizer3->Add(debugFlags2, wxSizerFlags().Expand().Border(wxALL));

    panel4->SetSizerAndFit(parent_sizer6);

    auto stdBtn = CreateStdDialogButtonSizer(wxOK|wxCANCEL);
    parent_sizer->Add(CreateSeparatedSizer(stdBtn), wxSizerFlags().Expand().Border(wxALL));

    SetSizerAndFit(parent_sizer);
    Centre(wxBOTH);

    wxPersistentRegisterAndRestore(this, "OptionsDlgBase");

    // Event handlers
    m_TargetDirPicker->Bind(wxEVT_DIRPICKER_CHANGED, &OptionsDlgBase::OnTargetDirChanged, this);
    m_PchHeaderPicker->Bind(wxEVT_FILEPICKER_CHANGED, &OptionsDlgBase::OnPchHeaderChanged, this);
    m_PchSrcPicker->Bind(wxEVT_FILEPICKER_CHANGED, &OptionsDlgBase::OnPchSrcChanged, this);
    btnAddInclude->Bind(wxEVT_BUTTON, &OptionsDlgBase::OnAddIncDir, this);
    btnAddCommonLibrary->Bind(wxEVT_BUTTON, &OptionsDlgBase::OnAddCommonLibraries, this);
    btnAddReleaseLibraries->Bind(wxEVT_BUTTON, &OptionsDlgBase::OnAddReleaseLibraries, this);
    btnAddDebugLibraries->Bind(wxEVT_BUTTON, &OptionsDlgBase::OnAddDebugLibraries, this);
    btnAddBuildLibraries->Bind(wxEVT_BUTTON, &OptionsDlgBase::OnAddBuildLibraries, this);

    return true;
}
